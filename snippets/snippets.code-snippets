{
	
	// #####################################################################################################
	// V1 Snippets #########################################################################################
	// #####################################################################################################
	"NS Function": {
		"prefix": ["ns-fun"],
		"body": ["function $0 () { \n\tconst logTitle = '${TM_FILENAME/(.*)\\..+$/$1/} => $0'; \n\ttry { \n\t\tUtility.logDebug(logTitle, 'START'); \n \n \n\t\tUtility.logDebug(logTitle, 'END');\n\t} catch (e) { \n\t\tUtility.logException(logTitle, e); \n\t}\n}"],
		"description": "A Netsuite Function."
	},
	"NS Class": {
		"prefix": ["ns-class"],
		"body": ["$0 () { \n\tconst logTitle = '${TM_FILENAME/(.*)\\..+$/$1/} => $0'; \n\ttry { \n\t\tUtility.logDebug(logTitle, 'START'); \n \n \n\t\tUtility.logDebug(logTitle, 'END');\n\t} catch (e) { \n\t\tUtility.logException(logTitle, e); \n\t}\n}"],
		"description": "A Netsuite Class."
	},
	"NS Arrow Function": {
		"prefix": ["ns-arrow-fun"],
		"body": ["/**\n* @description \n*/\nconst $0 = () => { \n\tconst logTitle = '${TM_FILENAME/(.*)\\..+$/$1/} => $0'; \n\ttry { \n\t\tUtility.logDebug(logTitle, 'START'); \n \n \n\t\tUtility.logDebug(logTitle, 'END');\n\t} catch (e) { \n\t\tUtility.logException(logTitle, e); \n\t}\n}"],
		"description": "A Netsuite Arrow Function."
	},
	"Utility debug": {
		"prefix": ["ns-udb"],
		"body": ["Utility.logDebug(logTitle, JSON.stringify({ $0 }));"],
		"description": "A Netsuite debug log."
	},
	"Utility Audit": {
		"prefix": ["ns-ua"],
		"body": ["Utility.logAudit(logTitle, JSON.stringify({ $0 }));"],
		"description": "A Netsuite Audit log."
	},
	"Utility Emergency": {
		"prefix": ["ns-ue"],
		"body": ["Utility.logEmergency(logTitle, JSON.stringify({ $0 }));"],
		"description": "A Netsuite Emergency log."
	},
	"Utility Throw Exception": {
		"prefix": ["ns-ute"],
		"body": ["Utility.throwException(logTitle, JSON.stringify({ $0 }));"],
		"description": "A Netsuite Throw Exception log."
	},
	"Utility Exception": {
		"prefix": ["ns-uex"],
		"body": ["Utility.logException(logTitle, JSON.stringify({ $0 }));"],
		"description": "A Netsuite Exception log."
	},
	"Extend Connector Common script": {
		"prefix": ["ns-extend-cc"],
		"body": ["if (typeof ConnectorCommon != 'undefined') {\n  const parentConnectorCommon =\n    typeof parentConnectorCommon !== 'undefined' ? { ...parentConnectorCommon } : { ...ConnectorCommon };\n  ConnectorCommon = {\n    ...parentConnectorCommon,\n    // place extended functions here...\n    $0\n\n  };\n}\n"],
		"description": "A Netsuite Extend Connector Common script."
	},
	"Extend Client Factory script": {
		"prefix": ["ns-extend-fcf"],
		"body": ["if (typeof F3ClientFactory !== 'undefined') {\n  F3ClientFactory.createClient = function (accountId, storeType) {\n    let client = {};\n    client = new ExtendedClient();\n    return client;\n  };\n\n  function ExtendedClient() {\n    const currentClient = new F3ClientBase();\n    const baseClient = new F3ClientBase();\n\n    // place extended functions here...\n$0\n    return currentClient;\n  }\n}"],
		"description": "A Netsuite Extend Client Factory script."
	},
	"Extend Item Export script": {
		"prefix": ["ns-extend-iel"],
		"body": ["if (typeof ItemExportLibrary !== 'undefined') {\n  const parentItemExportLibrary =\n    typeof parentItemExportLibrary !== 'undefined' ? { ...parentItemExportLibrary } : { ...ItemExportLibrary };\n  ItemExportLibrary = {\n    ...parentItemExportLibrary,\n    // place extended functions here...\n    $0\n\n  };\n}"],
		"description": "A Netsuite Extend Item Export script."
	},
	"User Event script": {
		"prefix": ["ns-script-ue"],
		"body": ["/**\n * Dependencies:\n * - f3_utility_methods.js\n */\n\nconst methodName = (function () {\n  return {\n    /**\n     * The recordType (internal id) corresponds to the \\'Applied To\\' record in your script deployment.\n     * @appliedtorecord recordType\n     *\n     * @param {String} type Operation\n     * @param {nlobjForm} form Current form\n     * @param {nlobjRequest} request Request object\n     * @returns {Void}\n     */\n    userEventBeforeLoad(type, form, request) {\n      const logTitle = '${TM_FILENAME/(.*)\\..+$/$1/} => userEventBeforeLoad';\n      try {\n        Utility.logDebug(logTitle, 'START');\n\n\n        Utility.logDebug(logTitle, 'END');\n      } catch (e) {\n        Utility.logException(logTitle, e);\n      }\n    },\n\n    /**\n     * The recordType (internal id) corresponds to the \\'Applied To\\' record in your script deployment.\n     * @appliedtorecord recordType\n     *\n     * @param {String} type Operation\n     * @returns {Void}\n     */\n    userEventBeforeSubmit(type) {\n      const logTitle = '${TM_FILENAME/(.*)\\..+$/$1/} => userEventBeforeSubmit';\n      try {\n        Utility.logDebug(logTitle, 'START');\n\n\n        Utility.logDebug(logTitle, 'END');\n      } catch (e) {\n        Utility.logException(logTitle, e);\n      }\n    },\n\n\n    /**\n     * The recordType (internal id) corresponds to the \\'Applied To\\' record in your script deployment.\n     * @appliedtorecord recordType\n     *\n     * @param {String} type Operation\n     * @returns {Void}\n     */\n    userEventAfterSubmit(type) {\n      const logTitle = '${TM_FILENAME/(.*)\\..+$/$1/} => userEventAfterSubmit';\n      try {\n        Utility.logDebug(logTitle, 'START');\n\n\n        Utility.logDebug(logTitle, 'END');\n      } catch (e) {\n        Utility.logException(logTitle, e);\n      }\n    }\n  };\n})();\n\n/**\n * The recordType (internal id) corresponds to the \\'Applied To\\' record in your script deployment.\n * @appliedtorecord recordType\n *\n * @param {String} type Operation\n * @param {nlobjForm} form Current form\n * @param {nlobjRequest} request Request object\n * @returns {Void}\n */\nfunction methodNameUserEventBeforeLoad(type, form, request) {\n  return methodName.userEventBeforeLoad(type, form, request);\n}\n\n/**\n * The recordType (internal id) corresponds to the \\'Applied To\\' record in your script deployment.\n * @appliedtorecord recordType\n *\n * @param {String} type Operation\n * @returns {Void}\n */\nfunction methodNameUserEventBS(type) {\n  return methodName.userEventBeforeSubmit(type);\n}\n\n/**\n * The recordType (internal id) corresponds to the \\'Applied To\\' record in your script deployment.\n * @appliedtorecord recordType\n *\n * @param {String} type Operation\n * @returns {Void}\n */\nfunction methodNameUserEventAfterSubmit(type) {\n  return methodName.userEventAfterSubmit(type);\n}\n"],
		"description": "Create User Event script."
	},

	// #####################################################################################################
	// V2 Snippets #########################################################################################
	// #####################################################################################################
	"NS Function V2": {
		"prefix": ["ns-fun"],
		"body": ["function $0 () { \n\tconst logTitle = '${TM_FILENAME/(.*)\\..+$/$1/} => $0'; \n\ttry { \n\t\tutility.logDebug({ title: logTitle, details: 'START'}); \n \n \n\t\tutility.logDebug({ title: logTitle, details: 'END' });\n\t} catch (e) { \n\t\tutility.logException({ title: logTitle, details: e }); \n\t}\n}"],
		"description": "A Netsuite Function v2."
	},
	"NS Class V2": {
		"prefix": ["ns-class"],
		"body": ["$0 () { \n\tconst logTitle = '${TM_FILENAME/(.*)\\..+$/$1/} => $0'; \n\ttry { \n\t\tutility.logDebug({ title: logTitle, details: 'START'}); \n \n \n\t\tutility.logDebug({ title: logTitle, details: 'END' });\n\t} catch (e) { \n\t\tutility.logException({ title: logTitle, details: e }); \n\t}\n}"],
		"description": "A Netsuite Class v2."
	},
	"NS Arrow Function V2": {
		"prefix": ["ns-arrow-fun"],
		"body": ["/**\n* @description \n*/\nconst $0 = () => { \n\tconst logTitle = '${TM_FILENAME/(.*)\\..+$/$1/} => $0'; \n\ttry { \n\t\tutility.logDebug({ title: logTitle, details: 'START'}); \n \n \n\t\tutility.logDebug({ title: logTitle, details: 'END' });\n\t} catch (e) { \n\t\tutility.logException({ title: logTitle, details: e }); \n\t}\n}"],
		"description": "A Netsuite Arrow Function v2."
	},
	"Utility debug V2": {
		"prefix": ["ns-udb-v2"],
		"body": ["utility.logDebug({ title: logTitle, details: JSON.stringify({ $0 })});"],
		"description": "A Netsuite debug log v2."
	},
	"Utility Audit V2": {
		"prefix": ["ns-ua-v2"],
		"body": ["utility.logAudit({ title: logTitle, details: JSON.stringify({ $0 })});"],
		"description": "A Netsuite Audit log v2."
	},
	"Utility Emergency V2": {
		"prefix": ["ns-ue-v2"],
		"body": ["utility.logEmergency({ title: logTitle, details: JSON.stringify({ $0 })});"],
		"description": "A Netsuite Emergency log v2."
	},
	"Utility Throw Exception V2": {
		"prefix": ["ns-ute-v2"],
		"body": ["utility.throwException({ title: logTitle, details: JSON.stringify({ $0 })});"],
		"description": "A Netsuite Throw Exception log v2."
	},
	"Utility Exception V2": {
		"prefix": ["ns-uex-v2"],
		"body": ["utility.logException({ title: logTitle, details: JSON.stringify({ $0 })});"],
		"description": "A Netsuite Exception log v2."
	},
	"Get Value V2": {
		"prefix": ["ns-get-value-v2"],
		"body": ["$1.getValue({ fieldId: '$1' });"],
	},
	"Set Value V2": {
		"prefix": ["ns-set-value-v2"],
		"body": ["$1.setValue({ fieldId: '$2', value: $3 });"],
	},
	"Get Sublist Value V2": {
		"prefix": ["ns-get-subvalue-v2"],
		"body": ["$1.getSublistValue({ sublistId: '$2', fieldId: '$3', line: $4 });"],
		"description": "To get the sublist value the initail line number will be 0 for V2."
	},
	"Set Sublist Value V2": {
		"prefix": ["ns-set-subvalue-v2"],
		"body": ["$1.setSublistValue({ sublistId: '$2', fieldId: '$3', line: $4, value: $5 });"],
		"description": "To set the sublist value the initail line number will be 0 for V2."
	},
	"Load Sales Order V2": {
		"prefix": ["ns-load-so-v2"],
		"body": ["const $1 = $2.load({\n  type: 'salesorder',\n  id: $3\n});\n\n$2.setValue({ fieldId: '$4', value: $5 });\n\nconst $1Id = $1.save({\n  enableSourcing: false,\n  ignoreMandatoryFields: true\n});"],
		"description": "To load salesorder for V2. Or it can be use for any type i.e salesorder, item, itemfulfillment, invoice, and cashsale, etc"
	},
	"Transform Sales Order V2": {
		"prefix": ["ns-trans-so-v2"],
		"body": ["const $1 = $2.transform({\n  fromType: 'salesorder',\n  fromId: $3,\n  toType: '$1'\n});\n\n$2.setValue({ fieldId: '$4', value: $5 });\n\nconst $1Id = $1.save({\n  enableSourcing: true,\n  ignoreMandatoryFields: true\n});"],
		"description": "To transform salesorder to any record type for V2. Examples of toType itemfulfillment, invoice, and cashsale, etc"
	},
	
	// #############################################################################################
	// Helpers #####################################################################################
	// #############################################################################################
	"Copy Script Libraries": {
		"prefix": ["ns-copy-lib"],
		"body": "let fileForDependencies = nlapiLoadRecord(\"scheduledscript\", 'ORIGIN_SCRIPT_ID');\nlet myScript = nlapiLoadRecord(\"scheduledscript\", 'YOUR_SCRIPT_ID');\nlet librariesCount = fileForDependencies.getLineItemCount(\"libraries\");\nfor (let i = 0; i < librariesCount; i++) {\n    let scriptfile = fileForDependencies.getLineItemValue('libraries', 'scriptfile', i + 1);\n    myScript.setLineItemValue('libraries', 'scriptfile', i + 1, scriptfile);\n}\nnlapiSubmitRecord(myScript);",
		"description": "Run this script inside the browser console to copy libraries from one another. YOUR_SCRIPT_ID referring your new script and ORIGIN_SCRIPT_ID is the script from which you want to copy dependencies"
	},
	"Function To Search The Record Existance V1": {
		"prefix": ["ns-search-rec"],
		"body": ["/**\n* @param {} el\n* @description \n*/\nconst isRecordExist = (el) => {\n  const logTitle = '${TM_FILENAME/(.*)\\..+$/$1/} => isRecordExist';\n  try {\n    const recordSearch = nlapiSearchRecord(\n      'RECORD_ID',\n      null,\n      [['FIELD_ID', 'is', el]],\n      [new nlobjSearchColumn('internalid').setSort(false)]\n    );\n    Utility.logDebug(logTitle, JSON.stringify({ recordSearch }));\n    return recordSearch ? recordSearch[0].getValue('internalid') : false;\n  } catch (e) {\n    Utility.logException(logTitle, e);\n  }\n}"],
		"description": "A Helper Function To Search Record."
	},
	"NS Create/Load Record V1": {
		"prefix": ["ns-upsert-rec"],
		"body": ["/**\n* @param {} recordId\n* @description \n*/\nconst upsertRecord = (recordId) => {\n  const logTitle = '${TM_FILENAME/(.*)\\..+$/$1/} => upsertF3ImageRecordData';\n  try {\n    const rec = recordId ? nlapiLoadRecord('RECORD_ID', recordId) : nlapiCreateRecord('RECORD_ID');\n    rec.setFieldValue('FIELD_NAME', 'VALUE');\n    return nlapiSubmitRecord(rec, true);\n  } catch (e) {\n    Utility.logException(logTitle, e);\n  }\n};"],
		"description": "Function to create/load record of any type."
	},
}