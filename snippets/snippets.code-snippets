{
	"F3 Function": {
		"prefix": ["ns-fun"],
		"body": ["function $0 () { \n\tconst logTitle = '${TM_FILENAME/(.*)\\..+$/$1/} => $0'; \n\ttry { \n\t\tUtility.logDebug(logTitle, 'START'); \n \n \n\t\tUtility.logDebug(logTitle, 'END');\n\t} catch (e) { \n\t\tUtility.logException(logTitle, e); \n\t}\n}"],
		"description": "A Folio3 Function."
	},
	"F3 Class": {
		"prefix": ["ns-class"],
		"body": ["$0 () { \n\tconst logTitle = '${TM_FILENAME/(.*)\\..+$/$1/} => $0'; \n\ttry { \n\t\tUtility.logDebug(logTitle, 'START'); \n \n \n\t\tUtility.logDebug(logTitle, 'END');\n\t} catch (e) { \n\t\tUtility.logException(logTitle, e); \n\t}\n}"],
		"description": "A Folio3 Class."
	},
	"F3 Arrow Function": {
		"prefix": ["ns-arrow-fun"],
		"body": ["/**\n* @description \n*/\nconst $0 = () => { \n\tconst logTitle = '${TM_FILENAME/(.*)\\..+$/$1/} => $0'; \n\ttry { \n\t\tUtility.logDebug(logTitle, 'START'); \n \n \n\t\tUtility.logDebug(logTitle, 'END');\n\t} catch (e) { \n\t\tUtility.logException(logTitle, e); \n\t}\n}"],
		"description": "A Folio3 Arrow Function."
	},
	"Utility debug": {
		"prefix": ["ns-udb"],
		"body": ["Utility.logDebug(logTitle, JSON.stringify({ $0 }));"],
		"description": "A Folio3 debug log."
	},
	"Utility Audit": {
		"prefix": ["ns-ua"],
		"body": ["Utility.logAudit(logTitle, JSON.stringify({ $0 }));"],
		"description": "A Folio3 Audit log."
	},
	"Utility Emergency": {
		"prefix": ["ns-ue"],
		"body": ["Utility.logEmergency(logTitle, JSON.stringify({ $0 }));"],
		"description": "A Folio3 Emergency log."
	},
	"Utility Throw Exception": {
		"prefix": ["ns-ute"],
		"body": ["Utility.throwException(logTitle, JSON.stringify({ $0 }));"],
		"description": "A Folio3 Throw Exception log."
	},
	"Utility Exception": {
		"prefix": ["ns-uex"],
		"body": ["Utility.logException(logTitle, JSON.stringify({ $0 }));"],
		"description": "A Folio3 Exception log."
	},
	"Extend Connector Common script": {
		"prefix": ["ns-extend-cc"],
		"body": ["if (typeof ConnectorCommon != 'undefined') {\n  const parentConnectorCommon =\n    typeof parentConnectorCommon !== 'undefined' ? { ...parentConnectorCommon } : { ...ConnectorCommon };\n  ConnectorCommon = {\n    ...parentConnectorCommon,\n    // place extended functions here...\n    $0\n\n  };\n}\n"],
		"description": "A Folio3 Extend Connector Common script."
	},
	"Extend Client Factory script": {
		"prefix": ["ns-extend-fcf"],
		"body": ["if (typeof F3ClientFactory !== 'undefined') {\n  F3ClientFactory.createClient = function (accountId, storeType) {\n    let client = {};\n    client = new ExtendedClient();\n    return client;\n  };\n\n  function ExtendedClient() {\n    const currentClient = new F3ClientBase();\n    const baseClient = new F3ClientBase();\n\n    // place extended functions here...\n$0\n    return currentClient;\n  }\n}"],
		"description": "A Folio3 Extend Client Factory script."
	},
	"Extend Item Export script": {
		"prefix": ["ns-extend-iel"],
		"body": ["if (typeof ItemExportLibrary !== 'undefined') {\n  const parentItemExportLibrary =\n    typeof parentItemExportLibrary !== 'undefined' ? { ...parentItemExportLibrary } : { ...ItemExportLibrary };\n  ItemExportLibrary = {\n    ...parentItemExportLibrary,\n    // place extended functions here...\n    $0\n\n  };\n}"],
		"description": "A Folio3 Extend Item Export script."
	},
	"User Event script": {
		"prefix": ["ns-script-ue"],
		"body": ["/**\n * Dependencies:\n * - f3_utility_methods.js\n */\n\nconst methodName = (function () {\n  return {\n    /**\n     * The recordType (internal id) corresponds to the \\'Applied To\\' record in your script deployment.\n     * @appliedtorecord recordType\n     *\n     * @param {String} type Operation\n     * @param {nlobjForm} form Current form\n     * @param {nlobjRequest} request Request object\n     * @returns {Void}\n     */\n    userEventBeforeLoad(type, form, request) {\n      const logTitle = '${TM_FILENAME/(.*)\\..+$/$1/} => userEventBeforeLoad';\n      try {\n        Utility.logDebug(logTitle, 'START');\n\n\n        Utility.logDebug(logTitle, 'END');\n      } catch (e) {\n        Utility.logException(logTitle, e);\n      }\n    },\n\n    /**\n     * The recordType (internal id) corresponds to the \\'Applied To\\' record in your script deployment.\n     * @appliedtorecord recordType\n     *\n     * @param {String} type Operation\n     * @returns {Void}\n     */\n    userEventBeforeSubmit(type) {\n      const logTitle = '${TM_FILENAME/(.*)\\..+$/$1/} => userEventBeforeSubmit';\n      try {\n        Utility.logDebug(logTitle, 'START');\n\n\n        Utility.logDebug(logTitle, 'END');\n      } catch (e) {\n        Utility.logException(logTitle, e);\n      }\n    },\n\n\n    /**\n     * The recordType (internal id) corresponds to the \\'Applied To\\' record in your script deployment.\n     * @appliedtorecord recordType\n     *\n     * @param {String} type Operation\n     * @returns {Void}\n     */\n    userEventAfterSubmit(type) {\n      const logTitle = '${TM_FILENAME/(.*)\\..+$/$1/} => userEventAfterSubmit';\n      try {\n        Utility.logDebug(logTitle, 'START');\n\n\n        Utility.logDebug(logTitle, 'END');\n      } catch (e) {\n        Utility.logException(logTitle, e);\n      }\n    }\n  };\n})();\n\n/**\n * The recordType (internal id) corresponds to the \\'Applied To\\' record in your script deployment.\n * @appliedtorecord recordType\n *\n * @param {String} type Operation\n * @param {nlobjForm} form Current form\n * @param {nlobjRequest} request Request object\n * @returns {Void}\n */\nfunction methodNameUserEventBeforeLoad(type, form, request) {\n  return methodName.userEventBeforeLoad(type, form, request);\n}\n\n/**\n * The recordType (internal id) corresponds to the \\'Applied To\\' record in your script deployment.\n * @appliedtorecord recordType\n *\n * @param {String} type Operation\n * @returns {Void}\n */\nfunction methodNameUserEventBS(type) {\n  return methodName.userEventBeforeSubmit(type);\n}\n\n/**\n * The recordType (internal id) corresponds to the \\'Applied To\\' record in your script deployment.\n * @appliedtorecord recordType\n *\n * @param {String} type Operation\n * @returns {Void}\n */\nfunction methodNameUserEventAfterSubmit(type) {\n  return methodName.userEventAfterSubmit(type);\n}\n"],
		"description": "Create User Event script."
	},
}